#version 430 core

layout(binding = 0, std430) writeonly buffer data0 {
    float heightMap[];
};
layout(binding = 1, std430) readonly buffer data1 {
    float ws[];
};

uniform float meshSize;
uniform float time;
uniform int wavesCount;

layout (local_size_x = 1, local_size_y = 1) in;

void main() {
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    uint baseIndex = (storePos.y * gl_NumWorkGroups.x + storePos.x) * 3;

    vec3 offset = vec3(0, 0, 0);
    for (int i = 0; i < wavesCount; i++) {
        vec2 k = vec2(ws[i * 6 + 0], ws[i * 6 + 2]);
        float dp = dot(k, vec2(storePos)) * meshSize;
        float S = dp - ws[i * 6 + 4] * time + ws[i * 6 + 5];
        offset.y += ws[i * 6 + 3] * cos(S);
        offset.xz += ws[i * 6 + 3] * normalize(k) * sin(S);
    }

    heightMap[baseIndex + 0] = storePos.x * meshSize - offset.x;
    heightMap[baseIndex + 1] = offset.y;
    heightMap[baseIndex + 2] = storePos.y * meshSize - offset.y;
}
