#version 430 core

#define WG_SIZE 8

layout (local_size_x = WG_SIZE, local_size_y = WG_SIZE) in;

layout (binding = 0, rgba32f) uniform readonly image2D butterfly;
layout (binding = 1, rgba32f) uniform image2D pp0;
layout (binding = 2, rgba32f) uniform image2D pp1;

uniform int stage;
uniform int pp;
uniform int dir;

struct compl {
    float Re, Im;
};
compl vcompl(vec2 v) {
    return compl(v.x, v.y);
}
compl mul(compl lhs, compl rhs) {
    return compl(lhs.Re * rhs.Re - lhs.Im * rhs.Im, lhs.Re * rhs.Im + lhs.Im * rhs.Re);
}
compl add(compl lhs, compl rhs) {
    return compl(lhs.Re + rhs.Re, lhs.Im + rhs.Im);
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec4 data;
    vec2 p1, p2;

    if (dir == 0) {
        data = imageLoad(butterfly, ivec2(stage, pos.x));
        if (pp == 0) {
            p1 = imageLoad(pp0, ivec2(data.z, pos.y)).rg;
            p2 = imageLoad(pp0, ivec2(data.w, pos.y)).rg;
        }
        else {
            p1 = imageLoad(pp1, ivec2(data.z, pos.y)).rg;
            p2 = imageLoad(pp1, ivec2(data.w, pos.y)).rg;
        }
    }
    else {
        data = imageLoad(butterfly, ivec2(stage, pos.y));
        if (pp == 0) {
            p1 = imageLoad(pp0, ivec2(pos.x, data.z)).rg;
            p2 = imageLoad(pp0, ivec2(pos.x, data.w)).rg;
        }
        else {
            p1 = imageLoad(pp1, ivec2(pos.x, data.z)).rg;
            p2 = imageLoad(pp1, ivec2(pos.x, data.w)).rg;
        }
    }

    compl res = add(vcompl(p1), mul(vcompl(data.xy), vcompl(p2)));
    if (pp == 0)
        imageStore(pp1, pos, vec4(res.Re, res.Im, 0, 1));
    else
        imageStore(pp0, pos, vec4(res.Re, res.Im, 0, 1));
}
