#version 430 core

// struct Wave {
//     float dirx
//     float diry;
//     float amp;
//     float freq;
//     float velocity;
//     float stepness;
// };

layout(std430, binding = 0) writeonly buffer resBuff {
    float data[];
};

// uniform uint wavesCount;
// layout(std430, binding = 1) readonly buffer waveBuff {
//     float waves[];
// };

uniform float meshSize;
uniform float time;

layout (local_size_x = 1, local_size_y = 1) in;

void main() {
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    float res = 0.f;
    // for (uint i = 0; i < wavesCount; i++) {
    //     float S = (waves[i * 6 + 0] * storePos.x + waves[i * 6 + 1] * storePos.z);
    //     S = (S * meshSize + waves[i * 6 + 4] * time) * waves[i * 6 + 3];
    //     res += node.pos.y += waves[i * 6 + 2] * pow((sin(S) + 1.f) * .5f, waves[i * 6 + 5]);
    // }
    data[storePos.y * gl_NumWorkGroups.x + storePos.x] = res;
}

// uint gWidth = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
// uint gHeight = gl_WorkGroupSize.y * gl_NumWorkGroups.y;
// uint gSize = gWidth * gHeight;

// float S = (waves[i * 6 + 0] * storePos.x + waves[i * 6 + 1] * storePos.z);
// S = (S * meshSize + waves[i * 6 + 4] * time) * waves[i * 6 + 3];
// res += node.pos.y += waves[i * 6 + 2] * pow((sin(S) + 1.f) * .5f, waves[i * 6 + 5]);