#version 430 core

#define M_PI 3.14159265358979323846
#define M_1_PI 0.318309886183790671538
#define M_SQRT1_2 0.707106781186547524401

layout (local_size_x = 1, local_size_y = 1) in;

layout (binding = 0, rgba32f) uniform readonly image2D xiTex;
layout (binding = 1, rgba32f) uniform writeonly image2D h0Map;

uniform float L;
uniform int N;

uniform float Amp;
uniform vec3 windDir;
uniform float windSpeed;

vec4 gaussRND() {
    vec4 noise = imageLoad(xiTex, ivec2(gl_GlobalInvocationID.xy));
    for (int i = 0; i < 4; i++)
        noise[i] = clamp(noise[i], 0.0001, 1.0); //clamp(noise[i], 0.001, 1.0);
    float v0 = 2.0 * M_PI * noise.x;
    float u0 = sqrt(-2.0 * log(noise.y));
    float u1 = 2.0 * M_PI * noise.z;
    float v1 = sqrt(-2.0 * log(noise.w));
    return vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
}

void main() {
    vec2 x = vec2(gl_GlobalInvocationID.xy) - float(N) / 2.0;
    vec2 k = vec2(2.0 * M_PI * x.x / L, 2.0 * M_PI * x.y / L);
    float L_ = (windSpeed * windSpeed) / 9.81;
    float mag = length(k);
    if (mag < 0.00001)
        mag = 0.00001;
    float magSq = mag * mag;

    float h0k = clamp(sqrt(Amp / (magSq * magSq)
        * pow(abs(dot(normalize(k), normalize(windDir.xz))), 6.0)
        * exp(-1.0 / (magSq * L_ * L_)))
        * exp(-magSq * pow(L / 2000.0, 2.0))
        * M_SQRT1_2, -4000.0, 4000.0);

    float h0minusk = clamp(sqrt((Amp / (magSq * magSq))
        * pow(abs(dot(normalize(-k), normalize(windDir.xz))), 6.0)
        * exp(-1.0 / (magSq * L_ * L_)))
        * exp(-magSq * pow(L / 2000.0, 2.0))
        * M_SQRT1_2, -4000.0, 4000.0);

    vec4 gauss_random = gaussRND();
    // vec4 gauss_random = imageLoad(xiTex, ivec2(gl_GlobalInvocationID.xy));

    vec4 res = vec4(gauss_random.xy * h0k, gauss_random.zw * h0minusk);
    imageStore(h0Map, ivec2(gl_GlobalInvocationID.xy), res);
}
