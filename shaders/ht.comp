#version 430 core

#define WG_SIZE 8

#define M_PI 3.14159265358979323846
#define M_1_PI 0.318309886183790671538
#define M_SQRT1_2 0.707106781186547524401

layout (local_size_x = WG_SIZE, local_size_y = WG_SIZE) in;

layout (binding = 0, rgba32f) uniform readonly image2D h0Map;
layout (binding = 1, rgba32f) uniform writeonly image2D htH;
layout (binding = 2, rgba32f) uniform writeonly image2D htx;
layout (binding = 3, rgba32f) uniform writeonly image2D htz;

uniform float L;
uniform int N;
uniform float time;

struct compl {
    float Re, Im;
};
compl vcompl(vec2 v) {
    return compl(v.x, v.y);
}
compl mul(compl lhs, compl rhs) {
    return compl(lhs.Re * rhs.Re - lhs.Im * rhs.Im, lhs.Re * rhs.Im + lhs.Im * rhs.Re);
}
compl add(compl lhs, compl rhs) {
    return compl(lhs.Re + rhs.Re, lhs.Im + rhs.Im);
}

void main() {
    vec2 pos = ivec2(gl_GlobalInvocationID.xy) - float(N) / 2.0;
    vec4 h0 = imageLoad(h0Map, ivec2(gl_GlobalInvocationID.xy));
    vec2 k = vec2(2.0 * M_PI * pos.x / L, 2.0 * M_PI * pos.y / L);

    float mg = max(1e-5, length(k));
    float w = sqrt(9.81 * mg);
    float coswt = cos(w * time);
    float sinwt = sin(w * time);

    compl dy = add(mul(vcompl(h0.xy), compl(coswt, sinwt)), mul(vcompl(h0.zw), compl(coswt, -sinwt)));
    compl dx = mul(compl(0.0, -k.x / mg), dy);
    compl dz = mul(compl(0.0, -k.y / mg), dy);

    imageStore(htH, ivec2(gl_GlobalInvocationID.xy), vec4(dy.Re, dy.Im, 0.0, 1.0));
    imageStore(htx, ivec2(gl_GlobalInvocationID.xy), vec4(dx.Re, dx.Im, 0.0, 1.0));
    imageStore(htz, ivec2(gl_GlobalInvocationID.xy), vec4(dz.Re, dz.Im, 0.0, 1.0));
}
