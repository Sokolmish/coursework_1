#version 430 core

#define M_PI 3.14159265358979323846
#define M_1_PI 0.318309886183790671538
#define M_SQRT1_2 0.707106781186547524401

layout (local_size_x = 1, local_size_y = 1) in;

layout (binding = 0, rgba32f) uniform writeonly image2D res;

float rand(vec2 c){
	return fract(sin(dot(c.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

float noise(vec2 p, float freq) {
	float unit = 1.0 / freq;
	vec2 ij = floor(p / unit);
	vec2 xy = mod(p, unit) / unit;
	xy = 0.5 * (1.0 - cos(M_PI * xy));
	float a = rand((ij + vec2(0.,0.)));
	float b = rand((ij + vec2(1.,0.)));
	float c = rand((ij + vec2(0.,1.)));
	float d = rand((ij + vec2(1.,1.)));
	float x1 = mix(a, b, xy.x);
	float x2 = mix(c, d, xy.x);
	return mix(x1, x2, xy.y);
}

float pNoise(vec2 p, int res) {
	float persistance = .56;
	float n = 0.;
	float normK = 0.;
	float f = 39.;
	float amp = 1.;
	int iCount = 0;
	for (int i = 0; i < 50; i++) {
		n += amp * noise(p, f);
		f *= 2.;
		normK += amp;
		amp *= persistance;
		if (iCount == res) break;
		iCount++;
	}
	float nf = n/normK;
	return nf * nf * nf * nf;
}

void main() {
    vec2 x = vec2(gl_GlobalInvocationID.xy) / gl_NumWorkGroups.xy;
    float val = pNoise(x, 50);
    imageStore(res, ivec2(gl_GlobalInvocationID.xy), vec4(val, val, val, 1));
}
